package features.java9;

import java.util.Optional;

// JDK 9 added 3 of these methods, ifPresentOrElse, or, and stream, which help us deal with default values, in a way.
public class Optionals {

    public static void main(String[] args) {

        // ifPresentOrElse behaves like ifPresent, but it allows us to specify a default action to perform
        // if no value is present in our Optional.
        // This is useful when we want to perform a specific action on the value, but track when the action couldnâ€™t be performed,
        // for example by firing an event, logging a message, or updating a metric.
        Optional.empty()
                .ifPresentOrElse(System.out::println, () -> System.out.println("empty"));
        Optional.of("something")
                .ifPresentOrElse(System.out::println, () -> System.out.println("empty"));

        // The or method checks if the given Optional contains a value. If a value is present,
        // it returns an Optional describing the value (the same Optional).
        // If no value is present, a new Optional generated by the supplying function is returned.
        // What orElse and orElseGet have in common is that they return values from inside an Optional, not the Optional itself like or.
        Optional.of("something").or(() -> Optional.of("empty"));
        Optional.empty().or(() -> Optional.of("empty"));

        // If a value is present in the given Optional, the stream method returns a stream containing only that value.
        // An empty stream is returned otherwise
        Optional.of("something").stream()
                .map(String::toUpperCase)
                .forEach(System.out::println);
    }

}
